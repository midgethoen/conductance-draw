@ = require([
  'mho:std',
  'sjs:object',
  {name:'lru', id:'sjs:lru-cache'},
  {name: 'bf', id:'./backfill.sjs'},
  {name:'ids', id:'./ids.sjs'},
]);

/*
 * Drawing datastructure:
 */
function Schema(){
  return {
    id: null,
    created: new Date().getTime(),
    strokeCount: 0,
    clientCount: 0,
    segments: [/*
      {coord:[12, 23], sid:3},
      {x:12, y:23, sid:3, color: black, thickness:15},
      {x:12, y:23, sid:3},
    */],
  };
}
function ActiveSchema(){
  return {
    newSegmentEmitter:@Emitter(),
    clients: [/*
      {id: 1},
      {id: 3},
    */],
  };
}



var
  activeDrawings = {},
  drawingCache,
  db = @bf.Storage('./drawingDB'),
  index;

function init(){
  drawingCache = @lru.makeCache(100);
  var drawings = 
    db.query('drawing/', 'drawing/\xFF')
     //parse the raw data
     .. @transform([keyData, drawingData]->[
          keyData.toString().replace(/^drawing\//, ''),
          JSON.parse(drawingData.toString()),
        ])
     //sort according to creation date
     .. @sort((d1,d2)->d2.created - d1.created)
     .. @toArray;
  index = drawings .. @map(x->x[0]) .. @ObservableVar;
}

function loadDrawing(drawingId){
  var drawing = undefined;
  //get it from the cache
  if ( (drawing=drawingCache.get(drawingId)) !== null ){
    return drawing;
  }

  //get it from the db and cache it
  db.get('drawing/'+drawingId){
    |drawingData|
    drawing = JSON.parse(drawingData.toString());
    //add fields necessary for active drawing 
    drawing = ActiveSchema() .. @merge(drawing);
    drawingCache.put(drawingId, drawing);
  }
  return drawing;
}

function putDrawing(drawingId, drawing){
  //store in the cache, if only for marking as recently used
  drawingCache.put(drawingId, drawing);
  //write to the database
  var d = Schema() .. @override(drawing); //conform to schema
  db.put('drawing/'+drawingId, JSON.stringify(d)); //???: spawn?
}

/*
 * Create a stream which outputs newly added segments to a drawing
 * Initially the stream outputs all segments
 * The stream also send's empty packets periodically to check if the client is still present 
 *  and if not; cleans up accordingly
 */
function segmentStream(drawing, clientId){
  function unregisterClient(){
    //remove the client and cleanup if it was the last
    drawing.clients = drawing.clients .. @filter(c->c.id != clientId) .. @toArray;
    if (!drawing.clients.length){
      console.log("Will cleanup active drawing: #{drawing.id}");
      delete activeDrawings[drawing.id];
    }
  }
  return @Stream(function(reciever){
    var idx = 0, once = false;;
    while (1) {
      var sendEmpty = false;
      waitfor {
        drawing.newSegmentEmitter .. @wait();
      } or {
        hold(30*1000);
        sendEmpty = true;
      } or {
        if (once) hold();
        else once = true;
      }
      var segments = drawing.segments.slice(idx)
        .. @filter(s->s.clientId !== clientId)
        .. @transform(function(s){s = @clone(s); delete s.clientId; return s})
        .. @toArray;
      idx = drawing.segments.length;
      if (segments.length || sendEmpty){
        try {
          console.log("SEND #{segments.length}/#{drawing.segments.length}");
          reciever(segments);
        } catch (e){
          //can't call the function on the client
          //"ureka catched" .. console.log;
          unregisterClient();
        } retract {
          //client has disconnected
          //"ureka retracted" .. console.log;
          unregisterClient();
        }
      }
    }
  });
}

/*
 * Create a function through which a client can submit new segments.
 */
function submitSegmentFunc(drawing, clientId){
  var clientId = drawing.clientCount;
  return function(segment){
    if (!segment.sid){
      segment.sid = ++drawing.strokeCount;
    }
    drawing.segments.push(segment .. @merge({clientId:clientId}));
    drawing.newSegmentEmitter.emit();
    putDrawing(drawing.id, drawing);
    return segment.sid;
  }
}

/*
 * Get a drawing.
 * Either:
 * - pass an id to fetch an existing drawing.
 * - call without arguments to create a new one.
 */
function getDrawing(drawingId){
  var log = '';
  var drawing;
  if (!drawingId){
    //create a new drawing
    //TODO: Create function which only checks the ID and doesn't load the drawing
    do {
      drawingId = @ids.newID();
    } while (loadDrawing(drawingId)) 
    log += "creating new drawing: #{drawingId}";

    drawing = activeDrawings[drawingId] = Schema() .. @merge(ActiveSchema())

    drawing.id = drawingId;
    putDrawing(drawingId, drawing);
    index.modify(x->[drawingId].concat(drawingId));
  } else if (!loadDrawing(drawingId)){
    throw 'Unknown drawing id';
  } else {
    log += "fetching drawing: #{drawingId}";
    drawing = activeDrawings[drawingId] = loadDrawing(drawingId);
  }
  //prepare the drawing for the client(s)
  drawing.clientCount++;
  var clientId = drawing.clientCount;
  drawing.clients.push({id: clientId});
  
  log += "; for client \##{activeDrawings[drawingId].clientCount}";
  //print to server console 
  //console.info(log);
  return [
      drawingId, 
      {
        id: null,
        submitSegment: null,
        segments: null
      } .. @merge(
          drawing, 
          {
            segments: drawing .. segmentStream(clientId), 
            submitSegment: drawing .. submitSegmentFunc(clientId),
          }
        ),
  ];
}
exports.getDrawing = getDrawing;

function getGallery(){
  return index .. @transform(x->x);
}
exports.getGallery = getGallery;

init();
